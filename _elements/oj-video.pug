link(rel="import" href="../lib/bower_components/polymer/polymer.html")
link(rel="import" href="../lib/bower_components/marked-element/marked-element.html")

dom-module#oj-video
	// ---------------------------------------------------------------	
	style
		:stylus
			@import '../_lib/css/elements.imports.styl'
			:host
				z-index: -100
				position: fixed
				top: 0
				width: 100%
				height: auto
				+below(1100px)
					top: 5.5rem
			#big-logo
				display: block
				position: absolute
				top: 10rem
				text-align: center
				z-index: 10
				color: white
				+below(1100px)
					display: none
				&:before
					content: 'f'
					icon()
					display: block
					font-size: 14rem
				&:after
					content: 'g'
					icon()
					display: block
					font-size: 9rem
					margin-top: 75%
			#video_overlay
				position: absolute
				z-index: 1
				width: 100%
				height: $video-ratio
				color: white
				cursor: pointer
			#subtitles
				position: absolute
				top: 4rem
				right: 2rem
				display: inline-block
				+below(1100px)
					top: 2rem
					right: 1rem
			.markdown-html
				*
					color: white
					font-family: $P
					font-weight: 700
					font-size: 1.6rem
					text-align: right
					letter-spacing: .125em
					list-style-type: none
			#bannertext
				position: absolute
				display: flex
				flex-direction: column
				justify-content: center
				width: 50%
				height: 100%
				top: 0
				left: 25%
				p
					display: block
					margin: -18% auto 0 auto
					max-width: 6em
					font-family: $P
					font-weight: 700
					text-align: center
					line-height: 1em
					color: rgba(white, .9)
					padding: 1rem 0
					border-top: 8px solid rgba(white, .9)
					border-bottom: 8px solid rgba(white, .9)
					font-size: 5rem
					+below(1600px)
						font-size: 4rem
					+below(1100px)
						font-size: 3.5rem
					
			video
				width: 100%
				height: auto
				z-index: -1

	// ---------------------------------------------------------------	
	template
		#video_overlay(on-tap="_playToggle")
			a#big-logo
			marked-element#subtitles(markdown='[[currentSubs.0]]')
				.markdown-html
			#bannertext
				p [[currentSubs.1]]
			content
		video#video(playsinline muted loop autoplay poster="[[sources.poster]]")
			source#webm(src="[[sources.webm]]" type="video/webm")
			source#mp4(src="[[sources.mp4]]" type="video/mp4")


	// ---------------------------------------------------------------	
	script
		:coffee-script
			Polymer
				is: 'oj-video'
				properties:
					sources:
						type: Object
						value: ->
							{
								webm: 	"/assets/videos/video.webm"
								mp4: 	"/assets/videos/video.mp4"
								poster: "/assets/videos/poster.jpg"
							}	

					options:
						type: Object
						value: ->
							{
								muted: 'muted'
								loop: 'loop'
								autoplay: 'autoplay'
							}

					currentTime:
						type: Number
						reflectToAttribute: true
						value: 0
					
					currentCues:
						type: Array
						reflectToAttribute: true
						value: ->
							return [0,0]
						computed: '_computeCurrentCues(currentTime, subs)'
					
					subs:
						type: Array
						reflectToAttribute: true
						value: ->
							[
								[ [0, 'start 1'],[5, 'next 1'] ]
								[ [0, 'start 2'],[5, 'next 2'] ]
							]

					currentSubs:
						type: Array
						reflectToAttribute: true
						computed: '_computeCurrentSubs(currentTime, currentCues, subs)'
						value: ->
							return ['a', 'b']

							
				_computeCurrentCues: (time, subs)->
					cues = this.currentCues
					for cue, i in cues
						if time < subs[i][1][0]
							cues[i] = 0
						else if cue >= subs[i].length-1
							cues[i] = cue
						else if time > subs[i][cue+1][0]
							cues[i] = cue+1
						else cues[i] = cue
					return cues

				_computeCurrentSubs: (time, cues, subs)->
					return cues.map((cue, i)->
						return subs[i][cue][1]
					)
					
				_playToggle: ->
					video = this.$.video
					if video.paused then video.play() else video.pause()
					return

				ready: ->
					video = this.$.video
					updateProgress = setInterval((->
						if video.paused then return else this.currentTime = video.currentTime
					).bind(this), 500
					)

					return

				attached: ->
					return
				detached: ->
					return
